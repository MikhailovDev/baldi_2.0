0 Какие основные принципы инкапсуляции включает в себя ООП?
1 Сокрытие данных
1 Открытый интерфейс класса
1 Закрытый интерфейс класса
1 Использование наследования
2 0

0 Что представляет собой открытый интерфейс класса?
1 Все методы и свойства доступны для изменения извне класса
1 Только определенные методы и свойства доступны извне класса
1 Доступ к открытым методам и свойствам, позволяющий получить закрытую информацию, хранящуюся внутри объекта определенного класса
1 Все методы и свойства доступны только внутри класса
2 2

0 Какие уровни доступа используются для реализации инкапсуляции в C#?
1 public
1 private
1 protected
1 sealed
2 012

0 Что такое getter и setter методы в контексте инкапсуляции?
1 Методы для получения (getter) и установки (setter) значений приватных полей класса
1 Методы для наследования свойств от других классов
1 Методы для создания новых экземпляров классов
1 Методы для удаления данных из объекта
2 0

0 Какие модификаторы доступа помогают реализовать принцип инкапсуляции в языке программирования C#?
1 public
1 private
1 protected
1 sealed
2 012

0 Какие утверждения относительно методов-конструкторов являются правильными?
1 конструктор выполняет инициализацию полей объекта
1 конструктор вызывается раньше всех остальных методов
1 конструктор отвечает за создание объекта при выполнении программы
1 конструктор отвечает за освобождение памяти, выделенной объекту
2 012

0 Какие проблемы решает инкапсуляция в объектно-ориентированном программировании?
1 Зависимость компонентов программы друг от друга
1 Доступ к данным, которые не должны изменяться за пределами определения класса
1 Излишняя сложность реализации программного продукта
2 1

0 Что такое "сокрытие данных" в контексте инкапсуляции?
1 Процесс передачи информации между различными объектами программы
1 Механизм скрытия сложности реализации, а также закрытых данных от пользователя класса
1 Способ передачи информации только через защищенные каналы связи
1 Процесс создания защитных слоев для информации в программе
2 1

0 Какие модификаторы доступа позволяют регулировать уровень видимости членов класса в C#?
1 public
1 private
1 protected
1 selected
2 012

0 Что нужно сделать, чтобы установить новое значение для приватного поля "name" в классе Person?
1 Вызвать метод setName()
1 Напрямую изменить поле "name"
1 Воспользоваться конструктором класса, который в качестве единственного аргумента принимает строку для инициализации поля "name"
2 0

0 Имеется класс Car, какие утверждения относительно инкапсуляции верны?
1 Для изменения скорости необходимо вызвать метод openCarburetorValves(), вместо  pressGasPedal()
1 Для включения автомагнитолы необходимо вызвать метод turnOnCarRadio()
1 Для запуска двигателя необходимо вызвать метод startEngine(), вместо turnOnFuelPump() и placeFuelInCombustionChamber()
2 12

0 Какой уровень доступа соответствует методам класса Person: GetName, SetName?
1 public
1 protected
1 private
1 internal
2 0

0 Какие утверждения справедливы относительно правил описания методов в классах?
1 Методы оформляются как подпрограммы
1 Методы могут иметь формальные параметры
1 Все методы должны иметь определение
1 Все методы должны иметь разные названия
2 01

0 Какие утверждения справедливы относительно методов доступа
1 Использование методов доступа является одним из проявлений принципа инкапсуляции
1 Эти методы вводятся для организации контролируемого доступа к закрытым данным
1 Get-метод (геттер) используется для запроса текущего значения закрытого элемента данных
1 Set-метод (сеттер) используется для изменения текущего значения элемента данных
2 0123

0 Если на основе некоторого класса созданы его объекты-экземпляры, то
1 Все они имеют одинаковый набор полей данных, но могут иметь разные значения этих полей
1 Максимально возможное число создаваемых объектов определяется ресурсами оперативной памяти
1 Все созданные объекты используют один набор методов-подпрограмм
1 Для каждого объекта создается свой отдельный набор методов-подпрограмм
2 012