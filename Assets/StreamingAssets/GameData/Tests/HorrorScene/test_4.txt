0 Что такое инкапсуляция в объектно-ориентированном программировании?
1 Объединение данных и методов в разных классах
1 Механизм скрытия данных от прямого доступа извне
1 Процесс создания экземпляров классов
1 Возможность наследования свойств и методов от других классов
2 1

0 Что означает сокрытие данных в контексте инкапсуляции?
1 Данные доступны только внутри класса
1 Данные доступны извне класса
1 Доступ к данным зависит от уровня доступа (public, private, protected)
1 Данные могут быть изменены из любого места программы
2 0

0 Что означает закрытый интерфейс класса?
1 Все методы и свойства доступны для изменения извне класса
1 Только определенные методы и свойства доступны извне класса
1 Нет ограничений на доступ к методам и свойствам извне класса
1 Означает методы, доступные только внутри этого класса
2 3

0 Какие преимущества обеспечивает инкапсуляция в программировании?
1 Сокрытие реализации от пользователя
1 Улучшение безопасности данных
1 Уменьшение зависимостей между компонентами программы
1 Увеличение производительности программы
2 012

0 Что означает принцип "класс должен быть открыт для расширения, но закрыт для изменения"?
1 Возможность добавления новых методов и свойств без изменения существующего кода
1 Невозможность создания новых экземпляров класса
1 Возможность изменения всех методов и свойств в любое время
1 Ограничение доступа к методам и свойств извне класса
2 0

0 Как инкапсуляция способствует скрытию данных?
1 Делая все атрибуты закрытыми
1 Путем предоставления доступа к атрибутам через геттеры и сеттеры
1 С помощью искажения имен для скрытия имен атрибутов
1 Путем ограничения доступа к деталям реализации
2 3

0 Что означает модификатор доступа private в контексте инкапсуляции?
1 Доступ к элементу класса только из того же класса, где он объявлен
1 Доступ к элементу класса из любого места программы
1 Доступ к элементу класса из дочерних классов
1 Доступ к элементу класса только через статический вызов
2 0

0 Что означает модификатор доступа protected в контексте инкапсуляции?
1 Доступ к элементу класса только из того же класса, где он объявлен
1 Доступ к элементу класса из любого места программы
1 Доступ к элементу класса из дочерних классов
1 Доступ к элементу класса только через статический вызов
2 2

0 Какие принципы следует соблюдать для обеспечения правильной инкапсуляции?
1 Использование только модификаторов доступа public и private
1 Ограничение доступа к данным через getter и setter методы
1 Разделение интерфейса класса на закрытый и открытый
1 Использование абстрактных типов данных для хранения информации
2 12

0 Что такое "информационное сокрытие" в контексте инкапсуляции?
1 Принцип скрытия сложности реализации от пользователя.
1 Способ передачи информации между различными компонентами программы.
1 Создание защитных слоев для информации в программе.
1 Процесс передачи информации только через защищенные каналы связи.
2 0

0 Что такое "структурное сокрытие" в контексте инкапсуляции?
1 Процесс создания защитных структур для данных в программе.
1 Механизм скрытия структуры данных от прямого доступа извне объекта или класса.
1 Процесс передачи информации только через определенные структуры данных.
1 Создание новых структур данных на основе существующих структур.
2 1

0 Какой уровень доступа соответствует полям класса Person: age, name?
1 public
1 protected
1 private
1 internal
2 2

0 Какие типы методов обычно содержат классы?
1 Конструкторы
1 Методы доступа к свойствам
1 Методы, реализующие функциональность объектов класса
1 Деструкторы
2 012

0 Какое утверждение справедливо относительно открытых элементов класса
1 Открытыми должны быть все методы доступа
1 Все поля данных должны быть объявлены как открытые
1 Открытые элементы задаются с помощью метки private
2 0

0 Какое утверждение относительно закрытых элементов класса являются правильным?
1 Закрытые элементы доступны в любом месте программы
1 Закрытые элементы задаются ключевым словом private
1 Нет способов для получения значений приватных полей класса
2 2