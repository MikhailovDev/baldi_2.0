Спецификаторы доступа в наследовании
Если необходимо запретить создание объектов определенного класса, но в то же время разрешить доступ к его конструктору из производных классов, нужно использовать для решения этой задачи есть спецификатор доступа - protected (защищенный). Члены класса, находящиеся в зоне действия спецификатора доступа protected, являются видимыми для методов этого класса, а также для всех методов классов, производных от него, включая возможное многоуровневое отношения наследования.

Спецификатор final перед классом в контексте наследования означает, что класс не может быть замещен и не может использоваться в качестве базового класса. Это означает, что класс с модификатором final не может иметь наследников.

Private — объявляет метод или свойство доступным только в том классе в котором он присутствует. То есть к private методам и свойствам мы не можем обращаться ни из объектов, ни из дочерних классов.

Конструктор по умолчанию — это простая конструкция, которая сводится к созданию для типа конструктора без параметров. Так, например, если при объявлении нестатического класса не объявить пользовательский конструктор (не важно, с параметрами или без них), то компилятор самостоятельно сгенерирует конструктор без параметров.

base ключевое слово используется для доступа к членам базового класса из производного класса. Используйте его, если вы хотите:
•	Позволяет обращаться к полям дочернего класса
•	Позволяет вызвать метод базового класса, который был переопределен в классе наследнике

Методы в наследовании
Абстрактный метод — это метод класса в объектно-ориентированном программировании, реализация для которого отсутствует.
Класс, содержащий абстрактные методы, также принято называть абстрактным
Назначение абстрактных методов:
1.	Описание абстракции, которая в более конкретизированном виде не может быть реализована.
2.	Формальное удовлетворение требований о наличии статических методов при обращении к ним для прохождения проверки компилятора статической типизации, когда реализация их будет определена динамически (в процессе работы программы).

Переопределение метода в объектно-ориентированном программировании — одна из возможностей языка программирования, позволяющая создать новый метод в дочернем классе с тем же именем, что и у родительского, но уже с другим определением.

Как переопределить метод родительского класса при создании дочернего класса?
1.	В классе-наследнике создать метод с таким же именем, как в родительском классе.
2.	Добавить перед ним аннотацию @Override (с английского переводится как «переопределён»). Эта аннотация сообщит компилятору, что вы намеренно переопределяете метод.

Ромбовидное наследование
Ромбовидное наследование — это ситуация в объектно-ориентированных языках программирования с поддержкой множественного наследования, когда два класса B и C наследуют от A, а класс D наследует от обоих классов B и C.

Однако возникает проблема, когда Наследник D от двух классов B, C (которые были унаследованы от класса A) вызывает унаследованный метод класса A, который был переопределен как в классе B, так и в C в результате чего возникает неопределенность
 