Наследование
Наследование – это процесс передачи свойств и методов от одного класса к другому
Класс, от которого произошло наследование, называется базовым или родительским. Классы, которые произошли от базового, называются потомками, наследниками или производными классами.

Виды наследования
В объектно-ориентированном программировании существует несколько типов наследования, каждый из которых имеет свои особенности и применения:

- Одиночное наследование позволяет создать дочерний класс, который наследует все свойства и методы родительского класса. Это самый базовый и часто используемый тип наследования

- Множественное наследование дает возможность классу наследовать свойства и методы более чем от одного родительского класса. Множественное наследование поддерживают такие языки как C++ и Python

- Интерфейсное наследование в языках программирования, где классы могут реализовывать интерфейсы, позволяет классу обещать реализацию определенного набора методов.
Алгоритм создания наследованного класса
Например, создание дочернего класса Учитель на основе базового класса Человек:

1.Определить новые свойства и методы для класса Учитель

2. Указать, что класс Учитель наследуется от класса Человек

3. Вызвать конструктор базового класса в конструкторе дочернего класса для инициализации полей, определенных в родительском классе

Абстрактный класс и интерфейс
Абстрактный класс — это класс, который описан в программе,
имеет поля, функции, но не используется для создания объекта.
Объекты создаются только на основе производных классов, наследованных от абстрактного.
Например, абстрактным классом может быть базовый класс «сотрудник ВУЗа», от которого наследуются классы «аспирант», «профессор» и т.д. Т.к. производные классы имеют общие поля и функции (например, поле «год рождения»), то эти члены класса могут быть описаны в базовом классе. В программе создаются объекты на основе классов «аспирант», «профессор», но нет смысла создавать объект на основе класса «сотрудник вуза».
Интерфейс в наследовании — это механизм, позволяющий определить набор обязательных требований или соглашений, которые должны быть выполнены классами, использующими данный интерфейс. Интерфейс определяет набор методов, которые должны быть реализованы. В отличии от абстрактных классов, он не содержит реализации этих методов, а только их сигнатуры.
 